# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/90_utils.ipynb.

# %% auto 0
__all__ = ['sci_mode', 'pretty_str', 'sparse_join', 'ansi_color', 'to_str', 'str_tree']

# %% ../nbs/90_utils.ipynb 3
from collections import defaultdict
from tabulate import tabulate
import yaml
import jax
import jax.numpy as jnp
import numpy as np

# %% ../nbs/90_utils.ipynb 6
def sci_mode(f: float):
    return ((abs(f) < 10**-4) or
            (abs(f) > 10**3))

def pretty_str(x):
    """A slightly better way to print `float`-y values.
    Works for `np.ndarray`, `torch.Tensor`, `jax.DeviceArray`, and scalars."""

    if isinstance(x, int):
        return '{}'.format(x)
    elif isinstance(x, float):
        if x == 0.:
            return "0."

        sci = sci_mode(x)
        fmt = f"{{:.3{'e' if sci else 'f'}}}"

        return fmt.format(x)
    elif x.ndim == 0:
            return pretty_str(x.item())
    else:
        slices = [pretty_str(x[i]) for i in range(0, x.shape[0])]
        return '[' + ", ".join(slices) + ']'

def sparse_join(lst, sep=" "):
    # Join non-empty list elements into a space-separated string
    return sep.join( [ l for l in lst if l] )

def ansi_color(s: str, col: str, use_color=True):
        "Very minimal ANSI color support"
        style = defaultdict(str)
        style["grey"] = "\x1b[38;2;127;127;127m"
        style["red"] = "\x1b[31m"
        end_style = "\x1b[0m"
        return style[col]+s+end_style if use_color else s

# %% ../nbs/90_utils.ipynb 7
def to_str(
    x,              # Input
    color=True ,    # ANSI color highlighting  
    ddof=0          # For "std" unbiasing
    ):
    x = np.array(x)  # in jnp the code breaks, see https://github.com/google/jax/issues/14721
    if x.size == 0:
        return ansi_color("empty", "grey", color)

    zeros = ansi_color("all_zeros", "grey", color) if np.equal(x, 0.0).all() and x.size > 1 else None
    pinf = ansi_color("+Inf!", "red", color) if np.isposinf(x).any() else None
    ninf = ansi_color("-Inf!", "red", color) if np.isneginf(x).any() else None
    nan = ansi_color("NaN!", "red", color) if np.isnan(x).any() else None

    attention = sparse_join([zeros, pinf, ninf, nan])
    summary = None
    if not zeros:
        # Calculate stats on good values only.
        gx = x[np.isfinite(x)]
        minmax = f"x∈[{pretty_str(gx.min())}, {pretty_str(gx.max())}]" if gx.size > 2 else None
        meanstd = f"μ={pretty_str(gx.mean())} σ={pretty_str(gx.std(ddof=ddof))}" if gx.size >= 2 else None
        summary = sparse_join([minmax, meanstd])

    return sparse_join([summary, attention])


# %% ../nbs/90_utils.ipynb 10
def str_tree(tree):
    leaves, treedef = jax.tree_util.tree_flatten(tree)
    strs = [to_str(l, color=False) for l in leaves]
    ptree = jax.tree_util.tree_unflatten(treedef, strs)
    return yaml.dump(ptree, indent=2, allow_unicode=True)
